<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[我的转折点？]]></title>
    <url>%2F2019%2F03%2F18%2Fturningpoint-5%2F</url>
    <content type="text"><![CDATA[PHP是世界上最好的语言 我始终承认并绝不会反驳这句公认的言论，我也曾一度觉得PHP挺有意思，并认真跟着老师学习了解这门语言，也写了一些有趣的东西。 一直觉得自己是个喜新不厌旧的人，但估计骨子里还是透着喜新厌旧的情愫。 大三的暑假，因为临近毕业，开始思考怎么做毕业设计的事情。没有一点头绪，无头苍蝇样的在网上搜索着各种各种的项目，期待着灵感的涌现。然而现实是灵感没有丝毫的动静，网页上的广告倒是涌现了一大推。 应该是有一条“自学Python巴拉巴拉巴拉”的广告吧 忽然想到，那段时间看求职信息，倒是有很多公司招人的要求上有写：熟悉Python。 确实，Python是一门最近真的很火的语言，优点就在这儿不一一列举了。入门很简单倒是事实。于是那个暑假，我家都没回，在学校偷偷摸摸的住了一个多月，自学Python。 我并不是一个自学能力多强的人，这个词嘴上说着容易，但是没有人引导，单纯是跟着网上的那些教程学习的话，估计也就只是入个门罢了。一个多月倒是有收获，不过用我所学的那点东西，东西开发一个项目还是力所不及的。 到大四综合实训，倒是有成天的时间坐在教室里做项目。把买了将近一年的域名捡起来，自己又买了服务器，一个月时间，用Python Django框架搭了自己博客。本以为拿着它再添一点功能，做个毕业设计应该能行了。 项目都接近尾声了，文章放了一大推，都开始构思还能往自己博客里面放一些什么功能的时候，导师来了一句“毕业设计还是要跟自己专业挂钩哦~” boom~~原地究极阿姆斯特朗螺旋爆炸！ 我，物联网工程专业，跟专业挂钩，意思是，我得加上硬件。那么请告诉我，我一个个人博客系统怎么加硬件，拿头加？ 罢了~罢了~博客功能也就不加了，把功能完善就部署上线了，做综合实训的项目设计还是绰绰有余的。 现在域名也到期了，服务器也到期了，我又可以大声喊出那句“ikaros停运！” 可惜！！！图都没有了，只在写得系统设计与分析的文档里找到当时画的设计图…可惜，真是可惜。 不好意思，我又跑题了。 虽然Python学的半灌水，但是好像也不是想的那么不堪，导师提醒毕设要和专业挂钩后，我立马一转攻势，在网上看了两天的资料，转天就买了《物联网Python开发实战》。你要战，我便战！ 抱着书啃了三四天，书上倒是有一个项目“智能灌溉系统”，嗯~有点意思。硬件需求，树莓派、arduino、杜邦线若干、传感器若干等等等等，嗯~买买买。别忙还有前端界面，嗯~cool~，前端的源码呢？倒是有个githup的地址，打开一看，这全是后端的代码啊，还有硬件里面的源码，说好的前端的界面呢，总不能让我自己写吧，html、css、js这谁顶得住啊！不了不了，这伤身体。 我TMD又不是全栈！ 随后又在网上找了很多项目，最后还是决定单纯的结合树莓派控制摄像头往前端拍照片吧。思路还是比较简单，写起来倒也上手，转手就买了树莓派，两天写了个用树莓派往七牛云服务器里发送定时拍的照片，easy！ 然后，卡住、、、 我的毕设总不能用七牛云做服务器吧，那工作量也太少了吧，我在树莓派里可能就写了100多行代码… 卡卡卡卡，一直卡住。 然后综合实训也结束了，秋招马上要到了，大家都开始忙着找工作了。随波逐流的，我也开始寻觅自己的工作。 最后还是决定找Python方面的工作，一是希望可以在工作中学到点自学学不到的东西，然后帮助完成我的毕设，毕竟，毕业要紧。二来Python倒是个不错的发展方向，现在Ai人工智能炒得这么火，指不定哪天就发达了呢？梦想还是要有的。 最后是，150多家公司来校招，只有4、5个Python岗位。我寻思这是打发叫花子呢？不过我整个人，决定了的事就不会再变了，说找Python我就要Python。 投了4家公司，只有两家有音讯，一家在河北，一面的时候我为了第一印象能好点，问我能否愿意去河南发展，那当然是愿意啦！河南那么好，实习工作还能开5000，还是大数据挖掘，哇简直不得了！另外一家，是川大教授开的公司，做网络安全方向系统的，听起来也不错。 然后，和家里通电话，“河南好远哦，回家好麻烦，人生地不熟的，碰到人贩子怎么办” 得，那就去川大那家公司看看吧，第二天河南那边还和我打电话喊我电话面试，还说想和我聊聊技术，结果被我一句我不想去河南给回绝了。我咋就这么傲呢？ 然后就是，川大公司的笔试，二面，三面，入职。 来了，来了，划重点，我要点题了。 某某顶点公司，我通过Python面试，拿到Offer上面写着Linux研发工程师实习生，拖了我两个月让我年后入职，上班在公司喊我看了一个多月的PHP。 人生总是起起落落落落落落落落落… 说好的Python呢？Linux我也行啊，写网站部署上线的时候也倒腾了几个月的Linux吧，PHP是啥？是嘛，我理解你们的客户端后端系统用PHP写是没有错的，但是能告诉我为啥用的这么老版本的PHP，进公司没两天就然我把mysql改成mysqli。嚯嚯嚯，9102年了…… 对不起，我不该吐槽的。 反正就是，我越做越觉得，我的毕设完了，糟了我可能比不了业了，妈妈救我。 然后就是一个机缘巧合，我顺利辞职了，再见川大，可能再也吃不到食堂4.4二荤的饭了。 经过将近一周的思想挣扎，反思，我这段时间到底干了什么，我以后要做什么，我的出路在哪里，我是不是应该放下一切，痛定思痛做出一些改变，去学习一门新的技术语言。 大道理在脑子里过了千万遍。 成了！到朋友那家培训公司学前端吧，后端可能真的不适合我。 至此，我没有鄙视任何计算机语言，我只是单纯的认为前端是我想要的，是我能够放下一切，不顾一切的去学习的新的知识。 我也将在这个新开的博客里，写下每周学的心得和感想。 愿五个月毕业后，能够功成名就。 ikaros加油！]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[致力于此，身体力行]]></title>
    <url>%2F2019%2F03%2F04%2Ftroble-4%2F</url>
    <content type="text"><![CDATA[博客开了有几天了，本打算先搬过来以前写的技术向干货，再记录一下第一次上班的学习心得和笔记。 但是… 过完年回到成都，到去公司上班，到四天憋出来毕业论文初稿，这段时间，中间一直一直一直穿插着令人着迷又焦灼又向往又苦恼又期盼又失落又令人着迷的个人感情问题。 她不是我的初恋，但我却拿出比初恋多10倍的心思，穷尽了所有去爱。 有时候我也会问自己，她就是那个“对”的人吗？答案是肯定的，我觉得是。 那什么是对？什么又是不对？哪有什么天生一对，从喜欢走到爱情，不就是把彼此的不合拍磨合了吗？ 有很多话不想放到这里来讲，但是憋在心里特别难受。所以容我矫情一次。 我有点疼，但是我还能忍。（写到这儿刚好歌单跳到薛之谦的《天分》） 想得太多，想写的太多，以至于不知从何写起。先分割一下，整理下思绪。 曾今问过一个很有智慧的朋友：我失恋了很难受怎么办？ 朋友反问我：你为什么难受？ 我说：分手了就是很难受啊，我很想他…… 朋友只是淡淡的说：一般来说，失恋后低落是因为空虚，时间突然空出来了，填满就好了。 这句话轻描淡写，但我一下子就醒悟了。 人在闲的时候就是容易胡思乱想，越想越难受，还钻牛角尖。 我们要学会独处，一个人的时候，可以去公园溜达，健身，看书，做菜等等，让自己充实。 当你从自己玩的过程中获取到快乐，就会知道一个人也可以很好。当你知道一个人也可以很好的时候，就已经走出失恋了。 摘抄自知乎，对没错又是知乎。我其实可以直接放图的，但是我选择把它一个字一个字打出来，因为有很多话，要一个字一个字刻在心里，不然久了会忘记。 其实还好吧，我这还说不上失恋，至少我是这么认为的。 失恋的人，应该是绝望&gt;希望，我现在应该希望多于绝望吧，至少我这么认为的。 她说她最近很丧，她说她要把前任忘掉，她说等她好起来。 她说我为什么不早一点出现。 她喜欢问我为什么喜欢她，问我喜欢她什么。 她后面一直说我是笨蛋。 她说我只是被冲昏了头脑。 她最近和我说的话变少了。 她最近不会和我说话了。 3月2号晚上，还是3月3号凌晨？反正差不多那个时候。在她房间里，把我们想说的说了，把我想问的问了。其实还有很多想说的我没有说，很多想问的并没有问，我怕问过之后，往后就没得问了。最后得到一个“存档”的结果。还是在我要求今晚必须要有个结果下得出的。 是啊，存档。字面上像是《爱情公寓》里，关谷神奇和唐悠悠之间的存档。但他们那时存的吵架时候的档，存档期间一样是情侣吧。而到我这儿的存档，存的是感情的档，存档期间行同路人，连说话都是奢侈的。 其实我很不相信感情，能存放在哪儿，等时候到了拿出来再用。菜放冰箱里还要用保鲜膜封上呢，何况这感情，我连话都插不上，每天能做的只是帮她烧一下热水袋，早上起床上班前在她房里坐10分钟，我拿什么去维护我们那短短的精贵的感情。 我怕，我怕到时候我们读档的时候已经变了味儿了。或者根本就拿不出来了。或许一辈子都读不了档。 我和一个有女朋友的朋友讲，我在存档。他说：这还能存档啊？理解不了。 我和一个单身朋友讲，我在存档。他说：你这不是备胎吗？我当时就想反驳他，但是仔细想想，好像也有这么个意思。但，是不是又如何呢，我还不是心甘情愿的等。 对不起，以上的话可能说的有点过分了，但是我觉得说出来写出来，比较好受一些。对于上面的一切言论，我全权拥有吃了吐的权利，并且随时可以吃了吐。 再分割一下，思维窃取了。 嘛~终于回想起自己写的标题了。之前有点跑偏了。 致力于此，身体力行。 如同我上一篇转载的博客，这是我人生中必定会经历的过程，我应该选择坦然面对它。 哇，说起来好轻松啊，我他妈自己都不信。 但，我会加油。既然要等，那就不能在这期间让自己退步，如果到了那一天，希望能给她一个更好的自己。 今天在公司废了一天了，明天一定要拿起我该学习的，下个月完成自己的在学校就定下但一直没有实现的小目标。 还是那一句话。 期待与你的再次相遇。 –END–]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>thoughts</tag>
        <tag>emotion</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何快速走出失恋]]></title>
    <url>%2F2019%2F03%2F04%2Fshilian%2F</url>
    <content type="text"><![CDATA[去享受、不逃避、直面人生的每个阶段、每段经历， 是很难的。 这是一句旁观者说出简单，而当局者明白也难以做到的话。 你只可以经历它的洗刷。 你可以恨，大吐苦水，如何付出，如何冷漠，如何过分，如何有恃无恐。 你可以找来亲朋好友，逐一分析，逐一抚慰，逐一申诉，说着说着，你觉得你好像自己明白了很多。 你可以原谅，可以理智地接受人心难测，现实难违，时机不对，暗暗下定心思不去想，顺其自然，平常心。你可以像一个喋喋不休的病人一样，找回那些朋友，说你想通了，其实不怪谁，其实不过是运气不好，其实他的不好你都不恨，你现在想通了。 然后晚上睡觉，一些你识别不清的鬼魅抓着你的心往下堕去，早上醒来，你还没清醒，就像被痛苦紧紧攥着，被打了几枪，你的心还是痛。 你可以否定他，连同着早就为你咬牙切齿的朋友，一起去认识自己当初是多么的傻，去看清对方是一个怎样不值得的人，性格中有多少瑕疵，相比之下自己是多么优秀。 你可以放纵自己去犯贱，去找对方，去伤到尽头，去穷尽你所能想到的一切办法，去让自己彻底死心。 你可以声色犬马，放纵自己，找来代替，搂搂抱抱哭哭啼啼。 这些方法，一二三四，有些会让你暂时舒缓，有些会让你感到更糟。然后，夜幕降临，太阳升起，你会发现一切事情，于事无补。 你还是痛苦，还是悲伤，还是孤独，还是满脑子都是对方。 我为什么要说那么令人绝望的事情？因为这是事实，而且，还有一个事实是，你越快走出来，你以后只会摔得越重。 失恋是，你的情感不受控制，完全战胜了理性的一个时期，其实你做些什么，你自己能感受到的正面作用很少。时间过得凌迟般的慢，但是的的确确的，很慢很慢地，你会觉得，好些了。 可能两个礼拜后，你开始可以睡着；差不多一个月，你可以真正地重现投入到工作里；两个月，你慢慢开始恢复对异性的感觉了， 不再时时刻刻拿前任来和遇到的所有人对比了。 很漫长是不是，但这是有利于你的。真的，听着，这有利于你。 无论你是甩人，还是被甩，如果你很快地又爱上了谁，完全不去细想刚刚结束的这段失败的恋情，那只是为日后的更大的痛苦做铺垫罢了。无论你是甩人，还是被甩，否定对方当然有利于你，让你觉得自己没失去什么，让你感到自己是正确的一方，让你舒服。 但注意了，假如你一心想着跳过这个阶段，这样，你一点成长都不会有。准备好几年后，你再来恍然大悟，一切过往在你脑内全部忽然海啸把你淹没，你就会知道你从前，一次次，对的，一次次，重重复复犯着同一个错误，而且错过了无数你找不回来的良机。 好，那么，不去快速熬过这个失恋期，究竟要做什么？ 不要再找对方了。 一开始，爱想啥，想啥，没什么羞耻的。想对方，想，幻想新欢，想，想天想地尽管想好了。你会想对方，不是因为你输了，是因为你当初的投入。「对方一点都没有想你」、「只有你一个在傻乎乎地想」，这是正常的，因为对方没你投入，投入错吗，投入挺好的。你当初的快乐也许很大在于你投入的这份珍惜，不在于对方的素质与态度，而你懂得珍惜，你永远会快乐。 反思，分析，没完没了地，直到你完全想清楚了。你要去完完全全分析之前那段感情的自己，那段感情里的他，各种因素，每个行为。你一开始也许是为了好受，会想到对方的坏多一点，想到自己的不好，会内疚难受得又想找回对方。 没关系，承认事实，反复了，再重来。很多结论，得出了之后，过几天你又会忘记，重新迷惑，重新痛苦，又进入胡同。而且甚至每次得出的结论都不一样。没关系，一次次地想，想到自己觉得得到结论，又一次想通为止。有些结论你会过几天推翻，有些结论最终在你多次回想之后，你会确信。但是只要你一直坚持去想，去分析，而不是糊弄自己、浑浑噩噩，行尸走肉的你，心中会越来越明白，越来越接近那个自己不愿意接受的事实。 你现在不一定完全好了，但你已经好多了，反复少了。给些时间自己消化事实吧。你明白了很多很多道理。你是如此幼稚、对方是如此幼稚你却一头扎进去、从对方的不珍惜感受到自己从前是多么不懂珍惜、自己真正想要怎样的人、感情中有什么一触即炸的雷区、自己相比对方的优／缺点。你手握一大堆，让你成长的事实。 这段时间可以尝试突破一下自己的边界。失恋，痛苦得很，可以趁机去将自己的生活走大一点。实际上，失恋的这段日子，是我最神奇而丰富的一段日子： 我因为难受，比日常更放得开，我认识了很多新朋友，很多生活以外的圈子的朋友：服装设计师、派对DJ、化妆师、创客、策展人、发型设计师等等。视野不能说没有拓宽。 马上开始了本来搁置的计划。 因为寻求帮助和听取意见而了解了以前很多自己逃避的关于自己的真相、别人的真实想法、两性的真实想法。重新认识了自己。 我去见识了很多以前没见识过的场面，一夜间海掷金钱的赌局、朋友的电子party、环城单车行、出席以前不敢出席的时装周等等。 着实地去变得更好，更多运动、更多反省、更多提升、更多打扮，而不去SNS刻意表现自己变得很好。 不要做什么？ 你日后会觉得自己廉价的任何放纵。 将对方塑造成一无可取的人麻痹自己。 自哀自怜。 决心从此不再投入、不再认真，成为刺猬。因为爱没错，只是对象、时间或方法错了。 强迫自己不想，逃避难过的感觉。 在公开场合、SNS呈现比实际上好的假象。 找对方的朋友。 如果看到这个答案的你，此刻正因为失去一段感情而痛不欲生，HEY朋友，我也仍然处在这个阶段之中呢，不过现在回想过去这段时间，真的是近年来我成长得最快的日子了。此时此刻的我，不敢说，我又懂了很多，爱与人生，都是需要漫长的领会和学习的吧，我们都需要永远地、不停地学习。加油，你会感谢这段日子的。 作者：匿名用户 链接：https://www.zhihu.com/question/19833746/answer/43351207 来源：知乎]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>thoughts</tag>
        <tag>emotion</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Nginx和Gunicorn自动化部署Django博客网站（心得教程）]]></title>
    <url>%2F2019%2F02%2F28%2FNginx-Gunicorn%2F</url>
    <content type="text"><![CDATA[基于Nginx和Gunicorn自动化部署Django博客网站（心得教程）阅前叨逼叨众所周知，基于PHP的网站部署到服务器上，目前有很多一站式的Web管理，比如：宝塔Linux，一键创建网站、FTP、数据库，连免费的SSL能帮你做好了，一键打上证书，成了！简直不要太方便！可我偏偏就选择了用Python+Django来做这个博客，当准备往服务器上部署的时候，各种各样的坑就来了。最后网站倒是上线了，只是感觉头顶凉飕飕的… 首要的准备在这里我们准备使用当下较为流行的Nginx+Gunicorn方式来把我们的Django博客部署到服务器上，然后通过域名来访问我们的网站。 （提取关键词）服务器、域名，这便是我们做这项工作的首要准备： 一台可以通过外网访问的服务器。 一个自己的域名（最好备过案，没有备案也无伤大雅）。 一颗勇敢的心，遇坑不要怕，你遇到的坑99.9%网上都能够找到答案。 下面介绍一下这三点准备： 服务器现在阿里云、腾讯云都在大力发展这方面的服务，全民建站嘛。而如果你是学生，那么9.9包月不是梦，我购买的：轻量型应用服务器(刚看了一下，已经9.5了)，1核2G、5M带宽、40G系统SSG盘，对于个人网站已经是绰绰有余了。简简单单的购买成功后，推荐安装系统镜像 Ubuntu 16.04，当然CentOS也能够使用Nginx + Gunicorn来完成部署，只不过系统命令有一些不同，如又需要可以自行研究。本心得教程完全基于Ubuntu 16.04。 阿里云、腾讯云其他的服务器土豪请随意挑选，能够满足您的所有要求。 如果你不是学生，也不是什么什么二代，那么可以购买国外的服务器。有很多很便宜的服务器，我甚至还听说续期不要钱，不过每天都要上服务器使用一次，只要你能坚持…至于如何购买，我就不介绍了，只能说有能力的都买了。这类服务器可能性能就比不上阿里云、腾讯云的，但是你可以用它来搭梯子啊，VPN封的那么厉害，我用SS或者SSR就好了嘛（小声逼逼）。最后系统依旧选择Ubuntu 16.04。 域名购买域名，也就是网域名称系统，是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP地址数串。 在我们购买阿里云、腾讯云服务器的时候便能够购买域名，如： 阿里云域名注册系统。我的域名是在购买第一个服务器时加1毛钱送的，第二年续费就的加钱了。有很多很便宜的域名，如果只是为了测试，随便注册一个域名即可，但注意一点根据工信部规定，以下后缀的域名需要实名认证后才能使用： .cn/.com/.net/.top/.xyz/.vip/.club/.ren/.wang/.shop/.xin/.中国/.信息/.公司/.网络/.广东/.佛山 如果你购买的是上述后缀的域名，意味着需要提交个人的身份资料实名认证后才能正常使用，这通常需要花费几天的时间。所以如果只为了测试和学习部署的话，最好避开上述后缀的域名。 搭建服务器前提：本心得教程本地使用Window10为环境，服务器端使用Ubuntu 16.04。 在阿里云购买服务器后，网页自带服务器连接功能，无需使用Xshell等工具连接。但是要连接到服务器首先要进入你的服务器的监控页面，如果嫌麻烦，可下载安装Xshell进行服务器连接。具体操作这里就不赘述了，网上有很多教程能够帮到你。 安装软件连接到服务器后，一般是以root用户登陆的。而为了网站的安全维护，我们一般不选择在root下部署代码。这里我们新建一个用户Django，并将它加入超级用户组： 123456789101112131415#登陆到root用户后，在root用户下新建一个用户，Django是用户名#因为博客是基于Python的Django包搭建的，所以这里就用了Django作为名字#你可以使用自己喜欢的名字，不一定要和我一样root@localhost:~# useradd -m -s /bin/bash django#设置用户的密码#Ubuntu包括CentOS秉承着没有反馈就是最好的反馈，只要没有任何提示，那么你输入的命令就没有问题，不要以为系统什么都没有做#输密码的时候不会有字符显示，不要以为键盘坏了，正常输入即可root@localhost:~# passwd django#切换到新建的用户root@localhost:~# su - django#这时候@符号前面的用户名就换成了djangodjango@localhost:~$ 新用户创建成功后，只是为了能够在新用户的地址下部署代码，不一定非要切换到新用户在执行操作，因为有可能是Ubuntu 16.04的原因，虽然我把django加入到了超级用户组。但是有一些命令执行时任然提示权限不够，我目前还没有找到解决的办法，为了你我能够避开这些坑，以下的操作建议任然在root用户下执行，毕竟Ubuntu认为root才是老大… 下面我们为了避免所使用Ubuntu系统版本太旧而给后面安装软件带来麻烦，我们在使用前先更新一下。运行一下命令： 12root@localhost:~$ sudo apt-get updateroot@localhost:~$ sudo apt-get upgrade 耐心等待一会儿，更新完成后，我们就开始安装需要用到的软件：Nginx、Pytohn3、Git、pip 和 virtualenv。 123root@localhost:~$ root@localhost:~$root@localhost:~$ sudo apt-get install git python3 python3-piproot@localhost:~$ sudo pip3 install virtualenv 解析域名到服务器的IP地址在阿里云服务器的管理控制台，能够直接将你已经购买的域名进行解析，具体操作参阿里云域名解析服务。注意：需要备案的域名，大多数要先备案才能够解析，部分地区除外。 将域名和服务器的 IP 地址绑定后，用户就可以通过在浏览器输入域名来访问服务器了。下图是我的域名和服务器的 IP 地址绑定： 启动Nginx服务Nginx 是用来处理静态文件请求的。比如当我们访问一个博客文章详情页面时，服务器会接收到下面两种请求： 显示文章的详情信息，这些信息通常保存在数据库里，因此需要调用数据库获取数据。 图片、css、js 等存在服务器某个文件夹下的静态文件。 对于前一种请求，博客文章的数据需要借助 Django 从数据库中获取，Nginx 处理不了，它就会把这个请求转发给 Django，让 Django 去处理。而对于后一种静态文件的请求，只需要去这些静态文件所在的文件夹获取，Nginx 就会代为处理，不再麻烦 Django。 用 Django 去获取静态文件是很耗时的，但 Nginx 可以很高效地处理，这就是我们要使用 Nginx 的原因，当然其功能远不止这些。 运行下面的命令来启动我们已经安装的Nginx服务： 1root@localhost:~$ sudo service nginx start 然后我们在浏览器输入域名，当看到下面的界面说明Nginx启动成功了， 代码的部署部署前的项目配置Django 项目中会有一些 CSS、JavaScript 等静态文件，为了能够方便地让 Nginx 处理这些静态文件的请求，我们把项目中的全部静态文件收集到一个统一的目录下，这个目录通常位于 Django 项目的根目录，并且命名为 static。为了完成这些任务，需要在项目的配置文件里做一些必要的配置： 1234567blogproject/settings.py#其他配置STATIC_URL = '/static/'# 加入下面的配置STATIC_ROOT = os.path.join(BASE_DIR, 'static') STATIC_ROOT 指明了静态文件的收集目录，即项目根目录（BASE_DIR）下的 static 文件夹。 为了安全起见，在生产环境下需要关闭 DEBUG 选项以及设置允许访问的域名。打开 settings.py 文件，找到 DEBUG 和 ALLOWED_HOSTS 这两个选项，将它们设置成如下的值： 1234blogproject/settings.pyDEBUG = FalseALLOWED_HOSTS = ['127.0.0.1', 'localhost ', '.ikaros.xin'] ALLOWED_HOSTS 是允许访问的域名列表，127.0.0.1 和 localhost 是本地访问的域名，.ikaros.xin 是访问服务器的域名（这里换成你自己的域名）。域名前加一个点表示允许访问该域名下的子域名，比如 www.ikaros.xin、test.ikaros.xin 等二级域名同样允许访问。如果不加前面的点则只允许访问 ikaros.xin。 项目还会依赖一些第三方 Python 库，为了方便在服务器上一次性安装，我们将全部依赖写入一个叫 requirements.txt 的文本文件中。激活本地的虚拟环境（如果你使用了虚拟环境的话），并进入项目的根目录，运行 pip freeze &gt; requirements.txt 命令，我这里在本地环境win10下使用项目软件Pycharm，在项目终端运行： 12E:\Python\ikarosblog&gt;pip freeze &gt; requirements.txt 这时项目根目录下会生成了一个 requirements.txt 的文本文件，其内容记录了项目的全部依赖。 上传代码到服务器将代码上传到GitHub将代码上传到 GitHub 等代码托管平台，这样我们就可以方便地把代码拉取到服务器了。Git 和 GitHub 的使用相信你已经很熟悉了，这里就不赘述过程。如果不知道如何使用地话可以自行百度相关教程，参考：使用git将项目上传到github（最简单方法） 注意数据库文件不要上传！ 使用FTP上传代码如果实在没有使用过GitHub，或者嫌麻烦，我推荐一种懒人方法–使用WinSCP。 WinSCP是一个Windows环境下使用SSH的开源图形化SFTP客户端。同时支持SCP协议。它的主要功能就是在本地与远程计算机间安全的复制文件。WinSCP也可以链接其他系统,比如Linux系统。 自行百度下载WinSCP客户端，连接你的服务器，成功登陆服务器后，你能够以一种图形化的界面看到你服务器的文件和目录。上传代码也非常简单，直接将本地的代码项目拖到WinSCP下对应的服务器目录里就完成了。 是不是非常简单！同样只是上传代码，WinSCP要比GitHub方便的多。 设置服务器目录结构接下来需要把代码上传到服务器了。我服务器上存放代码的目录结构是这样的： 12345/home/yangxg/ sites/ demo.zmrenwu.com/ env/ django-blog-tutorial/ 一台服务器可能部署多个网站，所有网站代码都放在 sites/ 目录下。ikaros.xin 这个文件夹以网站的域名命名，便于区分。env/ 是 python 虚拟环境目录。ikarosblog/ 是 Django 博客项目目录。 因此先来创建这个目录结构，注意目录名替换为你自己的域名，以后涉及到 ikaros.xin的地方通常都要替换你自己的域名，后面就不再一一指出了，运行下面的命令: 1root@localhost:~$ mkdir -p ~/sites/ikaros.xin 这里 ~ 代表当前用户的 home 目录，即 /home/django/。 接下来创建虚拟环境，先进入到 ikaros.xin 目录下，然后运行 virtualenv 命令创建虚拟环境： 12root@localhost:~$ cd ~/sites/ikaros.xinroot@localhost:~/sites/ikaros.xin$ virtualenv --python=python3 env 注意这里使用 –python=python3 来指定克隆 Python3 的环境。因为 ubuntu 系统默认安装了 Python2，如果不特别指定的话 Virtualenv 默认克隆的是 Python2 的环境。 检查一下虚拟环境是否创建成功，运行 ls 命令列出当前目录下的文件和文件夹，看到 env 这个文件夹说明虚拟环境创建成功。 12root@localhost:~/sites/ikaros.xin$ lsenv 接着再从代码仓库把项目代码拉取过来，把 git clone 后的地址换成你自己的 GitHub 仓库地址！ 或者使用WinSCP拖取项目代码到ikaros.xin文件夹下。 运行 ls 命令检查一下是否拉取成功： 12root@localhost:~/sites/ikaros.xin$ lsenv ikarosblog 我们看到多了一个文件夹ikarosblog（文件夹名称又你的项目文件名或者GitHub仓库名字决定），说明拉取成功。 安装项目依赖激活虚拟环境，再进入到项目根目录，即 requirements.txt 所在的目录，安装项目的全部依赖： 123root@localhost:~/sites/ikaros.xin$ source env/bin/activate(env)root@localhost:~/sites/ikaros.xin$ cd ikarosblog/(env)root@localhost:~/sites/ikaros.xin/ikarosblog$ pip install -r requirements.txt 收集静态命令虚拟环境下继续运行 python manage.py collectstatic 命令收集静态文件到 static 目录下： 1(env)root@localhost:~/sites/ikaros.xin/ikarosblog$ python manage.py collectstatic 生成数据库虚拟环境下继续运行 python manage.py migrate 命令创建数据库文件： 1(env)root@localhost:~/sites/ikaros.xin/ikarosblog$ python manage.py migrate 注意：如果你的网站使用的是MySQL数据库，则需要安装Ubuntu下的MySQL。详情可参考我的另一篇文章：Ubuntu 16.04的MySQL安装与配置 创建超级用户虚拟环境下继续运行 python manage.py createsuperuser 命令创建一个超级用户，方便我们进入 Django 管理后台。这和本地开发时是一样的。 1(env)root@localhost:~/sites/ikaros.xin/ikarosblog$ python manage.py createsuperuser 配置 Nginx下面我们来配置Nginx用于处理用户请求 先在服务器的 /etc/nginx/sites-available/ 目录下新建一个配置文件，文件名我一般就设置为域名。写上下面的配置内容： 12345678910111213141516171819/etc/nginx/sites-available/ikaros.xinserver &#123; charset utf-8; listen 80; #服务的域名为 ikaros.xin server_name ikaros.xin; location /static &#123; #所有URL 带有 /static 的请求均由 Nginx 处理，alias 指明了静态文件的存放目录。 alias /home/django/sites/ikaros.xin/ikarosblog/static; &#125; location / &#123; #其它请求转发给 Django 处理。proxy_pass 后面使用了 unix 套接字，其作用是防止端口冲突，这里就不再详述。 proxy_set_header Host $host; proxy_pass http://unix:/tmp/ikaros.xin.socket; &#125;&#125; 我们可以选择使用vi编辑器在服务器端写文件，vi编辑器的使用方法百度可查，只需要掌握一点点简单的用法就行了。 当然我们还是可以使用WinSCP来新建文件和写文件，毕竟可视化的界面总比在服务器端写命令好多了，使用WinSCP就和在Windows下一样，这里就不多讲了。 我们在 /etc/nginx/sites-available/ 放置了配置文件，接下来需要创建一个符号链接，把这个配置文件加入到启用的网站列表中去，被启用网站的目录在 /etc/nginx/sites-enabled/，你可以理解为从 sites-available/ 目录下发送了一个配置文件的快捷方式到 sites-enabled/ 目录。具体命令如下： 1(env)root@localhost:~/sites/ikaros.xin/ikarosblog$ sudo ln -s /etc/nginx/sites-available/ikaros.xin /etc/nginx/sites-enabled/ikaros.xin 执行完符号连接后，我们可以发现在 /etc/nginx/sites-available/ 和/etc/nginx/sites-enabled/文件夹下，都各自有两个相同的配置文件一个default文件和一个我们写的ikaros.xin的配置文件。这时我们需要删除系统默认的default文件，不然这个default文件会导致我们自己写的配置文件失效。把default文件删掉就可以正常被nginx代理过去了。 使用GunicornGunicorn 一般用来管理多个进程，有进程挂了Gunicorn 可以把它拉起来，防止服务器长时间停止服务，还可以动态调整 worker 的数量，请求多的时候增加 worker 的数量，请求少的时候减少。 在虚拟环境下，安装 Gunicorn： 1(env)root@localhost:~/sites/ikaros.xin/ikarosblog$ pip install gunicorn 用 Gunicorn 启动服务器进程： 1(env)root@localhost:~/sites/ikaros.xin/ikarosblog$ gunicorn --bind unix:/tmp/ikaros.xin.socket blogproject.wsgi:application 浏览器输入域名，可以看到访问成功了！ 自动启动 Gunicorn现在 Gunicorn 是我们手工启动的，万一哪天服务器崩溃重启了又得重新手工启动。为此我们写一个自动启动脚本，这样当服务器重新启动后，脚本会帮我们重启 Gunicorn。先按 Ctrl + c 停止刚才启动的服务器进程。 写一个启动脚本，这样当服务器重启后能自动引导 Gunicorn 的启动。首先在/lib/systemd/system/目录下，创建服务脚本 bg.service，必须以service结尾： 1234567891011121314# /lib/systemd/system/bg.service[Unit]After=syslog.target network.target remote-fs.target nss-lookup.target[Service]# 你的用户User=django# 你的目录WorkingDirectory=/home/django/sites/ikaros.xin/ikarosblog# gunicorn启动命令ExecStart=/home/django/sites/ikaros.xin/env/bin/gunicorn --bind unix:/tmp/ikaros.xin.socket blogproject.wsgi:applicationRestart=on-failure[Install]WantedBy=multi-user.target 然后设置让脚本开机自动启动 1root@localhost:~$ sudo systemctl enable bg.service 拓展 常用命令 重新加载service文件：systemctl daemon-reload 启动一个服务：systemctl start bg.service 关闭一个服务：systemctl stop bg.service 重启一个服务：systemctl restart bg.service d 显示一个服务的状态：systemctl status bg.service 在开机时启用一个服务：systemctl enable bg.service 在开机时禁用一个服务：systemctl disable bg.service 查看服务是否开机启动：systemctl is-enabled bg.service 查看已启动的服务列表：systemctl list-unit-files|grep enabled 查看启动失败的服务列表：systemctl –failed 以后如果更新了代码，只要运行下面的命令重启一下 Nginx 和 Gunicorn 就可以使新的代码生效了： 12sudo service nginx reloadsudo systemctl enable bg.service 心得总结这篇文章是基于我自己部署这个网站后想写的第一篇正式的干货，即时大部分是基于网上的教程，但是经过我的踩坑，已经排除了这篇教程绝大多数的不足之处。 如果遇到问题，请通过一下方式寻求帮助： 在下方评论区留言。 将问题的详情描述以邮件的方式发送至ikarosyu@Gmail.com，随缘回复（如果我能看见的话，毕竟穷学生没钱搭SS了） – EOF –]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Linux</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Congratulate]]></title>
    <url>%2F2019%2F02%2F28%2Fcongratulate%2F</url>
    <content type="text"><![CDATA[​ 图片插入测试！！！ 插了N次，终于是给插进来了，早点Google多好，用图片外联不好吗？非要加个文件夹进来放图片… 话说在GitHub上搭blog确实性能hin一般，这图片的还是直接从仓库调用的加载却如此的慢。用这个来写博客怕是尽量少放点图。图片显示，全靠cookie帮忙缓存住。 ​ 吐槽完毕！！！]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>pictures</tag>
        <tag>share</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
